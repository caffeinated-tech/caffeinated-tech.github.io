<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-05-26T17:22:30+01:00</updated><id>http://localhost:4000/</id><title type="html">caffeinated.tech</title><subtitle>A tech blog on web development, server administration and assorted electronics</subtitle><entry><title type="html">React and Coffeescript (without JSX)</title><link href="http://localhost:4000/2017/09/07/react-and-coffeescript.html" rel="alternate" type="text/html" title="React and Coffeescript (without JSX)" /><published>2017-09-07T22:02:32+01:00</published><updated>2017-09-07T22:02:32+01:00</updated><id>http://localhost:4000/2017/09/07/react-and-coffeescript</id><content type="html" xml:base="http://localhost:4000/2017/09/07/react-and-coffeescript.html">&lt;p&gt;   
  ReactJS is taking the web by storm. Annoyingly it comes with another Javascript preprocessor - JSX. If you are already in a coffeescript environment, then you can give React a try without needing to learn JSX or adding it to your toolchain.
&lt;/p&gt;

&lt;!--end_excerpt--&gt;

&lt;h3 id=&quot;Coffeescript&quot;&gt;&lt;a href=&quot;#Coffeescript&quot;&gt;Coffeescript&lt;/a&gt;&lt;/h3&gt;    
&lt;p&gt;
  Coffeescript is a Javascript superscript (it transpiles to Javascript) similar to TypeScript and ActiveScript. It was written in 09/10 to show off &quot;the good parts&quot; of Javascript. It ships as the default Javascript engine with Ruby on Rails since version 3.1 which has helped make it one of the most popular JavaScript superscript on Github to date.
&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;
    Underneath that awkward Java-esque patina, JavaScript has always had a gorgeous heart. CoffeeScript is an attempt to expose the good parts of JavaScript in a simple way.
   &lt;a href=&quot;http://coffeescript.org/&quot;&gt; -- coffeescript.org&lt;/a&gt;
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;ReactJS&quot;&gt;&lt;a href=&quot;#ReactJS&quot;&gt;ReactJS&lt;/a&gt;&lt;/h3&gt;    
&lt;p&gt;
  React is the front end view library (note: it's not a framework) by Facebook which is heralded by developers for making complex UIs easy to manage, while (often) improving performance of web applications. React's core concept is stateful views. Given the same state it will always render the same view, regardless of how it arrived at this state. It was built to erradicate awkward to reproduce errors from complex UIs, as detailed in &lt;a href=&quot;https://www.youtube.com/watch?v=XxVg_s8xAms&quot; target=&quot;_blank&quot;&gt;the presentation introducing ReactJS&lt;/a&gt; in 2013 by Tom Occhino and Jordan Walke.  
&lt;/p&gt;
&lt;p&gt;
  It comes with it's own language, JSX, which allows the use of HTML-esque XML markup to create view components inside Javascript files. Think of your typical templating language which embeds code inside a HTML view, only in reverse. 
&lt;/p&gt;
&lt;p&gt;
  But honestly, I'm not a fan of it. As a Coffeescript dev, the idea of all those extra angle brackets from the JSX syntax inside the render method is unappealing. A side effect of having your view inside your code, is what happens when you want code inside your view (eg. for attaching click listeners or binding values). The result is deeply nested : javascript expressions inside curly braces inside HTML like markup inside your JS file. Because you are limited to JS expressions inside the view ( eg. text within a span, conditional classes) means that you have to resort to tertiary operators or anonymous, self-executing functions rather than the more legible &lt;code class=&quot;language-javascript&quot;&gt;if&lt;/code&gt; / &lt;code class=&quot;language-javascript&quot;&gt;else&lt;/code&gt; statements.
&lt;/p&gt;
&lt;p&gt;
  Take a look at a basic form component straight from the &lt;a href=&quot;https://facebook.github.io/react/docs/forms.html&quot;&gt;React docs&lt;/a&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
  class NameForm extends React.Component {
    constructor(props) {
      super(props);
      this.state = {value: ''};

      this.handleChange = this.handleChange.bind(this);
      this.handleSubmit = this.handleSubmit.bind(this);
    }

    handleChange(event) {
      this.setState({value: event.target.value});
    }

    handleSubmit(event) {
      alert('A name was submitted: ' + this.state.value);
      event.preventDefault();
    }

    render() {
      return (
        &amp;lt;form onSubmit={this.handleSubmit}&amp;gt;
          &amp;lt;label&amp;gt;
            Name:
            &amp;lt;input type=&quot;text&quot; value={this.state.value} onChange={this.handleChange} /&amp;gt;
          &amp;lt;/label&amp;gt;
          &amp;lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&amp;gt;
        &amp;lt;/form&amp;gt;
      );
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  The React component representing a form with an input element is represented as an ES6 Class. When constructed, the component is assigned a base &lt;code class=&quot;javascript&quot;&gt;state&lt;/code&gt; where the input value will be saved. This state is used within the render method, which is the equivalent of a one-way data binding in frameworks like AngularJS. To make the view update when the user updates the value in the text input field, an &lt;code class=&quot;javascript&quot;&gt;onChange&lt;/code&gt; handler needs to be attached, which will update the state via the &lt;code class=&quot;javascript&quot;&gt;this.setState&lt;/code&gt; method. This triggers a re-render of the component with the updated value.
&lt;/p&gt;
&lt;p&gt;
  This value can be pulled from the state to be used in the &lt;code class=&quot;javascript&quot;&gt;onSubmit&lt;/code&gt; handler, where you could post it to a server or persist in localstorage. But one caveat is the need for binding the component instance to the event listeners, as otherwise the event would override &lt;code class=&quot;javascript&quot;&gt;this&lt;/code&gt; within the scope of the callback methods. 
&lt;/p&gt;
&lt;p&gt;
  It's all fairly straightforward, but it's also a trivial example. It can be made even cleaner by dropping the JSX syntax and rewriting the whole thing in Coffeescript
&lt;/p&gt;

&lt;h2 id=&quot;Converting_to_Coffeescript&quot;&gt;&lt;a href=&quot;#Converting_to_Coffeescript&quot;&gt;Converting to Coffeescript&lt;/a&gt;&lt;/h2&gt;

&lt;h3 id=&quot;Replacing_JSX&quot;&gt;&lt;a href=&quot;#Replacing_JSX&quot;&gt;Replacing JSX&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;
  It is of course possible to write React without JSX in vanilla Javascript. But without JSX, we need to manually call of the &lt;code class=&quot;language-javascript&quot;&gt;React.DOM&lt;/code&gt; factories to build components out of the React representations of DOM elements. Markup as simple as the form above becomes convoluted when we have to call the methods and pass it object properties and child components.
&lt;/p&gt;
&lt;p&gt;
  Here is the render method in vanilla Javascript:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
  render() {
    return React.DOM.form({ onSubmit: this.handleSubmit },
      React.DOM.label({}, &quot;Name&quot;, 
        React.DOM.input({ type: 'text', value: this.state.value, onChange: this.handleChange })
      )
      React.DOM.input({ type: 'submit', value: 'Submit' })
    )
  }  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  It's not pretty, especially due to the deeply nested DOM components (&lt;code class=&quot;language-javascript&quot;&gt;React.DOM.x&lt;/code&gt;). But there are a lot of Coffeescript features which come in useful with React.
&lt;/p&gt;

&lt;h3 id=&quot;Destructuring_Assignment&quot;&gt;&lt;a href=&quot;#Destructuring_Assignment&quot;&gt;Destructuring Assignment&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;
  The &lt;a href=&quot;http://coffeescript.org/#destructuring&quot; target=&quot;_blank&quot;&gt;destructuring assignment&lt;/a&gt; allows us to pull object properties into separate variables with ease. Using this you can pull only those DOM elements which you need for each component into the parent scope:
&lt;/p&gt; 
&lt;aside&gt;
  &lt;strong&gt;NOTE:&lt;/strong&gt; This is possible in Javascript since ES6 too (see &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment&quot; target=&quot;_blank&quot;&gt;destructuring assignment documentation on MDN&lt;/a&gt; for details)
&lt;/aside&gt;
&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot;&gt;
  { form, label, input } = React.DOM
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;this&quot;&gt;&lt;a href=&quot;#this&quot;&gt;@ === this&lt;/a&gt;&lt;/h3&gt;    
&lt;p&gt;
  A useful shortcut in coffeescript is that the &lt;code class=&quot;language-coffeescript&quot;&gt;@&lt;/code&gt; symbol refers to &lt;code  class=&quot;language-coffeescript&quot;&gt;this&lt;/code&gt;. This is a convention borrowed from ruby where &lt;code  class=&quot;language-coffeescript&quot;&gt;@&lt;/code&gt; denotes any instance variables. If you want to access a property on the &lt;code  class=&quot;language-coffeescript&quot;&gt;this&lt;/code&gt;, then you can even skip the dot :
&lt;/p&gt;
&lt;pre&gt;&lt;code  class=&quot;language-coffeescript&quot;&gt;
  form
    onSubmit: @handleSubmit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  Here you can already see the &lt;code  class=&quot;language-coffeescript&quot;&gt;form&lt;/code&gt; factory which was pulled from &lt;code  class=&quot;language-coffeescript&quot;&gt;React.DOM&lt;/code&gt; being called straight from the root scope within our file.
&lt;/p&gt;

&lt;h3 id=&quot;Indentation_instead_of_brackets&quot;&gt;&lt;a href=&quot;#Indentation_instead_of_brackets&quot;&gt;Indentation instead of brackets&lt;/a&gt;&lt;/h3&gt;    
&lt;p&gt;
  This is the one feature of Coffeescript which got me hooked. Once you remove all the excessive brackets, semicolons and commas from Javascript, it becomes an elegant language. No brackets are used to call a function (given that it is being passed arguments). No brackets are needed to wrap a function body or code block. No brackets are needed to denote an object and commas are optional. Here is the resulting render function in Coffeescript
&lt;/p&gt;
&lt;pre&gt;&lt;code  class=&quot;language-coffeescript&quot;&gt;
  render: -&gt;
    form
      onSubmit: @handleSubmit
      label null,
        'name'
        input
          type: 'text'
          value: @state.value
          onChange: @handleChange
      input
        type: 'submit'
        'Submit'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  Isn't it beautiful? 
&lt;/p&gt;
&lt;p&gt;
  There are two Coffeescript features involved here. If you call a method in Coffeescript, and the first param is an object, then you can just pass it starting on the next line. Eg, the &lt;code  class=&quot;language-coffeescript&quot;&gt;setState&lt;/code&gt; call from &lt;code  class=&quot;language-coffeescript&quot;&gt;handleChange&lt;/code&gt; :
&lt;/p&gt;
&lt;pre&gt;&lt;code  class=&quot;language-coffeescript&quot;&gt;
  @setState
    value: event.target.value
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  If the object argument has more props, just continue adding them on new lines. 
&lt;/p&gt;
&lt;p&gt;
  Secondly, the remaining &lt;code  class=&quot;language-coffeescript&quot;&gt;children&lt;/code&gt; which are being passed to the method after the initial properties object are distinguished from the object simply by keeping the same indentation as the object, but not having keys. Each child component can the be passed on it's own line, and via indentation, you can place components inside the same parent even if they have complex children - eg. the submit button and label are both direct children of  the form.
&lt;/p&gt;
&lt;p&gt;
  The closing tags from JSX, which became closing parenthesis in Javascript can be dropped as they simply aren't required.
&lt;/p&gt;
&lt;p&gt;
  I've also left out the &lt;code class=&quot;language-coffeescript&quot;&gt;return&lt;/code&gt; statement, as Coffeescript implicitly returns the last statement in every block.
  But you will notice one caveat in the above example, which is that we have to pass &lt;code class=&quot;language-coffeescript&quot;&gt;null&lt;/code&gt; to &lt;code class=&quot;language-coffeescript&quot;&gt;label&lt;/code&gt; as it has no properties, but does have a child (the text &lt;code class=&quot;language-coffeescript&quot;&gt;'name'&lt;/code&gt;). Ideally I would like to see React components to accept only a child element (or array) to clean out this one inconsistency.
&lt;/p&gt;

&lt;h3 id=&quot;Binding_context&quot;&gt;&lt;a href=&quot;#Binding_context&quot;&gt;Binding context&lt;/a&gt;&lt;/h3&gt;    
&lt;p&gt;
  When dealing with DOM event listeners, we need to remember that &lt;code  class=&quot;language-coffeescript&quot;&gt;this&lt;/code&gt; inside a callback refers to the element which the event was caught on. But in React we usually want it to be the component, as we can access the DOM element via the &lt;code  class=&quot;language-coffeescript&quot;&gt;event&lt;/code&gt; argument. 
  This is why the &lt;code  class=&quot;language-coffeescript&quot;&gt;handleChange&lt;/code&gt; and &lt;code  class=&quot;language-coffeescript&quot;&gt;handleSubmit&lt;/code&gt; methods have &lt;code  class=&quot;language-coffeescript&quot;&gt;this&lt;/code&gt; binded to them inside the class:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot;&gt;
  class NameForm extends React.Component {
    constructor(props) {
      super(props);
      this.state = {value: ''};

      this.handleChange = this.handleChange.bind(this);
      this.handleSubmit = this.handleSubmit.bind(this);
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  In Coffeescript the &quot;fat arrow&quot; &lt;code class=&quot;language-coffeescript&quot;&gt;=&gt;&lt;/code&gt; automatically binds the context in which the function is defined (eg. the class) to the function's body.
&lt;/p&gt;

&lt;h3 id=&quot;String_interpolation&quot;&gt;&lt;a href=&quot;#String_interpolation&quot;&gt;String interpolation&lt;/a&gt;&lt;/h3&gt;    
&lt;p&gt;
  You'll have noticed that while the Javascript used double quotes for its strings, I've been using single quotes in the Coffeescript version. That is because in Coffeescript, double quotes are used for &lt;a href=&quot;http://coffeescript.org/#interpolation&quot;&gt;string interpolation&lt;/a&gt; using the &lt;code class=&quot;language-coffeescript&quot;&gt;#{}&lt;/code&gt; syntax. For example, if you wanted to place a name inside a welcome message, then the Coffeescript would be:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot;&gt;
  console.log &quot;Hello #{name} and welcome to Caffeinated.tech!&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;Putting_it_all_together&quot;&gt;&lt;a href=&quot;#Putting_it_all_together&quot;&gt;Putting it all together&lt;/a&gt;&lt;/h3&gt;    
&lt;p&gt;
  Finally,  we get a complete React Component in Coffeescript:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot;&gt;
  class NameForm extends React.Component
    constructor(props) -&gt;
      super(props)
      @state = 
        value: ''

    handleChange: (event) =&gt;
      @setState
        value: event.target.value

    handleSubmit: (event) =&gt;
      alert &quot;A name was submmited: #{@state.value}&quot;
      event.preventDefault()

    render: -&gt;
      form
        onSubmit: @handleSubmit
        label null,
          'name'
          input
            type: 'text'
            value: @state.value
            onChange: @handleChange
        input
          type: 'submit'
          'Submit'
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;Summary&quot;&gt;&lt;a href=&quot;#Summary&quot;&gt;Summary&lt;/a&gt;&lt;/h3&gt;    

&lt;p&gt; 
  Coffeescript is a language true to its roots - exposing the good parts of Javascript. This approach still works with newer libraries with highly specialized libraries like ReactJS. If you want to delve into the ReactJS world, but don't fancy adding another pre-compile step to your coffeescript project, then don't hold back.
&lt;/p&gt;
&lt;p&gt;
  While resources for the specific combination of Coffeescript and ReactJS are few and far between, there are some I can recommend. &lt;a href=&quot;https://blog.arkency.com/2015/05/you-can-use-coffeescript-classes-with-react-dot-js-pros-and-cons/&quot; target=&quot;_blank&quot;&gt;Arkency&lt;/a&gt; run a great development blog with many posts on using ReactJS with a Ruby on Rails / Coffeescript project.
&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
  If you have feedback, or would like some more posts on the topic of ReactJS and Coffeescript then &lt;a href=&quot;/contact.html&quot;&gt;let me know&lt;/a&gt;.
&lt;/p&gt;</content><author><name></name></author><category term="react" /><category term="coffeescript" /><category term="jsx" /><summary type="html">ReactJS is taking the web by storm. Annoyingly it comes with another Javascript preprocessor - JSX. If you are already in a coffeescript environment, then you can give React a try without needing to learn JSX or adding it to your toolchain.</summary></entry><entry><title type="html">Sorting by date in MongoDB</title><link href="http://localhost:4000/2017/08/01/sort-by-date-mongodb.html" rel="alternate" type="text/html" title="Sorting by date in MongoDB" /><published>2017-08-01T21:23:04+01:00</published><updated>2017-08-01T21:23:04+01:00</updated><id>http://localhost:4000/2017/08/01/sort-by-date-mongodb</id><content type="html" xml:base="http://localhost:4000/2017/08/01/sort-by-date-mongodb.html">&lt;p&gt;
  Sorting by date is a simple task in MongoDB. But that doesn't man you have to spend valuable resources on indexing timestamps in MongoDB. Here I present a method to sort documents via the already indexed id field.
&lt;/p&gt;

&lt;!--end_excerpt--&gt;
&lt;h3 id=&quot;indexes&quot;&gt;Indexes&lt;/h3&gt;
&lt;p&gt;
  When designing a &lt;a href=&quot;https://docs.mongodb.com/manual/introduction/&quot;&gt;MongoDB&lt;/a&gt; database for your application, you need to consider how it will scale. One limiting factor is how you index you collections. &lt;a href=&quot;https://docs.mongodb.com/manual/indexes/&quot;&gt;Indexes&lt;/a&gt; allow for fast and efficient sorting and searching of documents in your collection by the indexed fields. This is possible because the fields are kept sorted in memory.
&lt;/p&gt;
&lt;p&gt;
  It is easy to see the limitation of this approach - once you have too many indexes, and they don't fit into your server's physical memory, then the least used indexes will be shunted into the page file / swap partition. When these indexes are then accessed, a painfully slow fetch time is experienced as the indexes are retrieved from the disk to be used.
&lt;/p&gt;
&lt;p&gt;
  You can't keep buying more RAM, and will eventually reach the upper limit of your server configuration. Therefore it is imperative that you analyse your users' workflow and index those fields which they are going to sort and search data via most frequently.
&lt;/p&gt;

&lt;h3 id=&quot;dates&quot;&gt;Dates&lt;/h3&gt;
&lt;p&gt;
    One of the most common fields to query by is the timestamp, often named &lt;code class=&quot;hljs&quot;&gt;created_at&lt;/code&gt; in MongoDB. This is an 8 byte integer, meaning that while it will only take up 8 Mb per million documents in a collection, it will likely be used in almost every collection in your Database.
  &lt;/p&gt;
&lt;p&gt;
  You can easily save the 8 bytes per document by utilizing the BSON ObjectId.&lt;/p&gt;

&lt;h3 id=&quot;bsonobjectid&quot;&gt;BSON Object Id&lt;/h3&gt;
&lt;p&gt;
  BSON (Binary JSON) is the format in which data is stored in MongoDB. Every document in MongoDB is given a BSON Object Id as a unique identifier. They are 24 byte hexadecimal strings (you can even see one in the url of this post) This id has to always be indexed to allow for fast retrieval of a specific document. The ids follow a strict format: 
&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&quot;/images/bson_id.png&quot; alt=&quot;The anatomy of a BSON Object Id&quot;&gt;
&lt;/p&gt;
&lt;p&gt;
  So the first four bytes of the id are the unix timestamp at the moment in which the document was first persisted to the database. This means the id can be used to sort documents by their creation date! Say for example I want to find the first post I wrote:
&lt;/p&gt;
&lt;pre&gt;
  &lt;code class=&quot;language-javascript&quot;&gt; 
    db.posts.find().sort(_id: 1).limit(1)
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;
  Here is a &lt;a href=&quot;https://docs.mongodb.com/manual/reference/mongo-shell/#queries&quot;&gt;quick refresher&lt;/a&gt; on the mongo query syntax. If you wanted the most recent (ie. descending order) then it would be &lt;code class=&quot;language-javascript&quot;&gt;sort(_id: -1)&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
  Similiarly in &lt;a href=&quot;https://www.ruby-lang.org/en/&quot;&gt;ruby&lt;/a&gt; using the Mongoid ORM (Object Relational Mapper) gem, it would be:
&lt;/p&gt;

&lt;pre&gt;
  &lt;code class=&quot;language-ruby&quot;&gt;
    Posts.all.order_by(_id: 1).first
  &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;
  If you wanted to extract the timestamp from a document, you could add this function to your model definition:
&lt;/p&gt;

&lt;pre&gt;
  &lt;code  class=&quot;language-ruby&quot;&gt;
  def created_at
    # convert the BSON::ObjectId to a hex string 
    hex_id = self._id.to_s
    # take only the first 8 bytes which correspond to the time  
    hex_timestamp = hex_string_id[0..7]
    # convert the hex string (base 16) to an integer 
    timestamp_integer = hex_timestamp.to_i(16)
    # convert the unix timestamp in seconds to a time object 
    #   (which is implicitly returned)
    timestamp = Time.at(timestamp_integer)
  end
  &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;
  Which can be condensed to:
&lt;/p&gt;

&lt;pre&gt;
  &lt;code class=&quot;language-ruby&quot;&gt;
    def created_at
      Time.at self.id.to_s[0..7].to_i(16)
    end
  &lt;/code&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;sources&quot;&gt;Sources&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;a href=&quot;https://www.mongodb.com&quot;&gt;
      MongoDB introduction - mongodb.com
    &lt;/a&gt;
  &lt;/li&gt;
&lt;li&gt;
  &lt;a href=&quot;https://docs.mongodb.com/manual/indexes&quot;&gt;
    MongoDB Indexes - mongodb.com
  &lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
  &lt;a href=&quot;https://docs.mongodb.com/manual/reference/mongo-shell/#queries&quot;&gt; 
    MongoDB query syntax - mongodb.com
  &lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
  &lt;a href=&quot;https://www.ruby-lang.org/en/&quot;&gt;
    Ruby - ruby-lang.org
  &lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
  &lt;a href=&quot;https://docs.mongodb.com/mongoid/master/#ruby-mongoid-tutorial&quot;&gt;
    Mongoid gem documentation - mongodb.com
  &lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="MongoDB" /><category term="indexing" /><category term="sorting" /><category term="date" /><category term="bson" /><category term="objectid" /><summary type="html">Sorting by date is a simple task in MongoDB. But that doesn't man you have to spend valuable resources on indexing timestamps in MongoDB. Here I present a method to sort documents via the already indexed id field.</summary></entry><entry><title type="html">Atlantec 2017</title><link href="http://localhost:4000/2017/06/05/atlantec-2017.html" rel="alternate" type="text/html" title="Atlantec 2017" /><published>2017-06-05T14:15:47+01:00</published><updated>2017-06-05T14:15:47+01:00</updated><id>http://localhost:4000/2017/06/05/atlantec-2017</id><content type="html" xml:base="http://localhost:4000/2017/06/05/atlantec-2017.html">&lt;p&gt;
  &lt;a href=&quot;http://atlantec.ie/&quot;&gt;Atlantec&lt;/a&gt; is an annual conference on Software Devlopment held in Galway. This year it took place in &lt;a href=&quot;https://www.nuigalway.ie/&quot;&gt;NUIG&lt;/a&gt; on May 25th. There was a host of great presentations covering the hot topics of Docker, Microservices and Machine Learning, while also branching out into the wider world of technology including Mars Exploration and Soft Robots to support Heart Functions. 
&lt;/p&gt;


&lt;!--end_excerpt--&gt;
&lt;p&gt;&lt;img src=&quot;/images/atlantec-2017-logo.png&quot; alt=&quot;Atlantec 2017&quot;&gt;   &lt;/p&gt;
&lt;h3 id=&quot;atlantecsroots&quot;&gt;Atlantec's roots&lt;/h3&gt;
&lt;p&gt;The combined festival-conference kicked off 3 years ago in &lt;a href=&quot;https://www.gmit.ie/&quot;&gt;GMIT&lt;/a&gt; with the aim to showcase Galway's diverse technology culture and to create a space for technology professionals to share their expertise. Atlantec has successfully achieved these aims and created a well rounded conference. Especially when combined with the relaxed and friendly atmosphere which almost manages to attract high caliber speakers on it's own.&lt;/p&gt;
&lt;p&gt;Atlantec has been made possible by  the founding and support of many local companies - but the core organizer and contributor is the &lt;a href=&quot;http://www.itag.ie/&quot;&gt;Information Technology Association Galway&lt;/a&gt; (ITAG). They have done great work in promoting IT and creating a community for software developers based in Galway.&lt;/p&gt;
&lt;p&gt;### The talks&lt;/p&gt;
&lt;p&gt;I arrived eagerly with my notepad to pick up tips on Microservices, Docker and Machine Learning - all topics relevant to my current projects. Not only did the talks on these topics answer my questions and stoke my curiosity, but even those talks which were off topic to my interests were intriguing and eye opening.&lt;/p&gt;
&lt;p&gt;Here are short summaries of the talks, in the order in which they were presented on the day.&lt;/p&gt;
&lt;h2 id=&quot;microservicesanunexpectedjourney&quot;&gt;#### Microservices: An Unexpected Journey &lt;/h2&gt;
&lt;p&gt;&lt;em&gt;By &lt;a href=&quot;http://samnewman.io/&quot;&gt;Sam Newman&lt;/a&gt; of  &lt;a href=&quot;https://www.thoughtworks.com/&quot;&gt;Thoughtworks&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Microservices is a hot topic in the world of SaaS and cloud computing. Which is why it came as an eye opener how Sam showed it's roots in the Distributed Systems concepts of &lt;a href=&quot;https://en.wikipedia.org/wiki/Remote_procedure_call&quot;&gt;RPC&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Common_Object_Request_Broker_Architecture&quot;&gt;CORBA&lt;/a&gt; which stem from the late 70s and early 90s respectively. There are papers on the subject of splitting a monolithic system into multiple distributed components from the late 60s / early 70s, such as &lt;a href=&quot;http://repository.cmu.edu/cgi/viewcontent.cgi?article=2979&amp;amp;context=compsci&quot;&gt;On the criteria to be used in decomposing systems into modules&lt;/a&gt; by D L Parnas.&lt;/p&gt;
&lt;p&gt;It is a common theme in IT to reinvent the wheel because we dismiss relatively recent academic research as outdated in the fast-paced industry. But this wasn't my main take-away from Sam's talk. More important was the reminder that Microservies was invented as a means of simplifying development from a monolithic architecture to a service based one where individual services can be written and replaced quickly and effortlessly. I had forgotten this. My recent research into Microservices was focused on large scale queue systems such as &lt;a href=&quot;https://kafka.apache.org/&quot;&gt;Kafka&lt;/a&gt; and &lt;a href=&quot;https://aws.amazon.com/kinesis&quot;&gt;AWS Kinesis&lt;/a&gt;. But these facilitators of microservices are in and of themselves more complex and time consuming than maintaining the architecture they should replace. Sam's answer is to &lt;a href=&quot;https://en.wikipedia.org/wiki/KISS_principle&quot;&gt;Keep it Simple, Stupid&lt;/a&gt;. Start with a simple queue/communication protocol and scale up to Kafka / &lt;a href=&quot;https://www.rabbitmq.com/&quot;&gt;RabbitMQ&lt;/a&gt; as required.&lt;/p&gt;
&lt;h2 id=&quot;botschatops&quot;&gt;#### Bots &amp;amp; ChatOps&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;By &lt;a href=&quot;https://twitter.com/loopingrage&quot;&gt;Jose De Castro&lt;/a&gt; of &lt;a href=&quot;http://www.cisco.com/&quot;&gt;Cisco&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Jose gave a great introduction and overview of what ChatOps is and what advantages it brings to existing systems and stacks. In the past chat bots were rare due to the complex  AI, machine learning and natural language processing needed for them. But now many PaaS &amp;amp; SaaS systems offer all of these as pre built solutions (including &lt;a href=&quot;https://aws.amazon.com/machine-learning/&quot;&gt;AWS&lt;/a&gt;, &lt;a href=&quot;https://cloud.google.com/ml-engine/&quot;&gt;Google Cloud&lt;/a&gt;, &lt;a href=&quot;https://www.ibm.com/watson/how-to-build-a-chatbot/&quot;&gt;Bluemix&lt;/a&gt; and notably &lt;a href=&quot;https://www.crowdflower.com/&quot;&gt;Crowdflower&lt;/a&gt;). There are also services which specifically cater to bot-builders: &lt;a href=&quot;https://hubot.github.com/&quot;&gt;Hubot&lt;/a&gt;, &lt;a href=&quot;https://www.pandorabots.com/&quot;&gt;Pandorabot&lt;/a&gt; and &lt;a href=&quot;https://developers.facebook.com/docs/messenger-platform&quot;&gt;Facebook&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are great advantages to using chatbots internally in your company to manage operations (aka ChatOps). These are accountability, auditablility and context. Having chatbots from chat rooms &amp;amp; channels control your operations means you will have an (auditable) chat log which shows who made a change (accountability) and when / why they made the change (context). &lt;/p&gt;
&lt;h2 id=&quot;softrobotcanhelpaheartto&quot;&gt;#### Soft Robot can Help a Heart to &lt;/h2&gt;
&lt;p&gt;&lt;em&gt;By &lt;a href=&quot;https://www.linkedin.com/in/ellen-roche-a637729/?ppe=1&quot;&gt;Dr Ellen Roche&lt;/a&gt; of &lt;a href=&quot;http://www.harvard.edu/&quot;&gt;Harvard&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This talk was a departure from web technology and into some fascinating bio-mechanical engineering. People with heart problems, specifically severe &lt;a href=&quot;http://www.webmd.com/heart-disease/guide/muscle-cardiomyopathy&quot;&gt;dilated cardiomyopathy&lt;/a&gt;, rely on heart transplants as permanent cures. Many BTT (bridge to transplantation) patients need temporary aids while waiting on a heart transplant. The current solution is a &lt;a href=&quot;http://www.heartware.com/products-technology/hvad-advantage&quot;&gt;HVAD&lt;/a&gt; (ventricular assist device) - a mechanical pump implanted into the left ventricle which aids in circulating blood around the body. One negative with HVADs is the risk of blood clots forming when blood comes in contact with the metal pump.&lt;/p&gt;
&lt;p&gt;Dr. Ellen Roche has been working on an an alternative solution - a soft silicon sleeve which is wrapped around the heart. Inside the sleeve are multiple shaped smart material tubes which contract when pressure is applied. These are layered in multiple patterns to both squeeze and twist - thus mimicking the natural movement of the heart. A layer of sensors is also embedded in the sleeve which monitor the sleeves and hearts operation and can tweak timing and pressure based on this feedback.&lt;/p&gt;
&lt;p&gt;I came to this talk with no knowledge of dilated cardiomyopathy oruser friendly HVADs. But after Dr Ellen Roche's engrossing talk I'm going to keep an eye out for more developments of her soft robot for supporting heart functions. It has already gone through animal based in-vivo trials and will hopefully be helping save lives in the near future.&lt;/p&gt;
&lt;h2 id=&quot;whycontainerswhydockerwhynow&quot;&gt;#### Why Containers? Why Docker? Why Now?&lt;/h2&gt;
&lt;p&gt;By &lt;a href=&quot;https://integratedcode.us/&quot;&gt;Phil Estes&lt;/a&gt;, of &lt;a href=&quot;https://www.ibm.com/ie-en/&quot;&gt;IBM&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt; has been the next big thing for the past three years. I've been rather stuck in the world of development and have stayed away from it so far. My knowledge (and frustration) of it can be summed up by &lt;a href=&quot;https://circleci.com/blog/its-the-future/&quot;&gt;this fantastic post&lt;/a&gt; by &lt;a href=&quot;https://circleci.com/&quot;&gt;CircleCi&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Phil gave a good introduction to Docker - it's important to remember that while Docker is used like VMs, it is not true virtualization, but rather kernel level process isolation. It plays an important role in the evolving &lt;a href=&quot;https://github.com/cncf/landscape&quot;&gt;Cloud Native Landscape&lt;/a&gt; - Docker's popularity has permeated to most IaaS and PaaS services meaning with docker you are less tied to a single vendor and can easily migrated to those best suited to your needs.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/cncf_v0.9.5.jpg&quot; alt=&quot;Cloud Native Landscape V0.9.5&quot;&gt;   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fig 1.&lt;/strong&gt; The Cloud Native Landscape: A categorization of the most popular projects and startups in the cloud native space.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Docker isn't popular without good reason. Here is a summarized list of the advantages of Docker which Phil gave:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Developer Agility:&lt;/strong&gt; Less time spent setting up development environments and no more bugs due to differences in production and development environment. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Security:&lt;/strong&gt; Docker is secure by default. You need to explicitly open up ports to use them, and only need to open those which the specific container's application needs access to. A single container doesn't have access to other containers or the underlying OS. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Microservices:&lt;/strong&gt; It is easier to create and develop for a distributed architecture when you can use on of the many Docker orchestration tools to manage them (eg. &lt;a href=&quot;https://kubernetes.io/&quot;&gt;Kubernetes&lt;/a&gt;, &lt;a href=&quot;http://mesos.apache.org/&quot;&gt;Mesos&lt;/a&gt; and &lt;a href=&quot;https://docs.docker.com/engine/swarm/&quot;&gt;Docker Swarm&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Portability:&lt;/strong&gt; Thanks to popularity and ease of use, you can reploy your containers to any popular IaaS / PaaS service.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Standards:&lt;/strong&gt; Docker's popularity has given rise to competitors like &lt;a href=&quot;https://github.com/rkt/rkt&quot;&gt;rkt&lt;/a&gt;. The &lt;a href=&quot;https://www.opencontainers.org/about&quot;&gt;Open Container Initiative&lt;/a&gt; prevent a schism in standards and needing to support many bespoke container implementations.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;devopsandtheclouddoyourdeploymentsinminutesnotdays&quot;&gt;#### DevOps and the Cloud- Do your deployments in minutes not days&lt;/h2&gt;
&lt;p&gt;By &lt;a href=&quot;https://www.linkedin.com/in/johntallon/&quot;&gt;John Tallon&lt;/a&gt; of &lt;a href=&quot;http://www.storm.ie/&quot;&gt;Storm Technology&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A lack of dev-ops is often the reasons for projects to overshoot their deadlines. It takes a lot of experience to properly estimate the time taken to test, deploy and handover a finished project.&lt;/p&gt;
&lt;p&gt;John works for Storm technologies - a large, local business technology consultancy. He estimates that most of the time taken for release can be saved by following dev-ops standards. This is especially true for clients using cloud platforms which you can use during development. But even when clients require a self-hosted solution can the release be almost automated by supplying a prepared docker image and set of configuration.&lt;/p&gt;
&lt;p&gt;A Continuous Integration system (CI) (eg. &lt;a href=&quot;https://codeship.com/&quot;&gt;Codeship&lt;/a&gt;, &lt;a href=&quot;https://circleci.com/&quot;&gt;CircleCI&lt;/a&gt;, &lt;a href=&quot;https://www.jetbrains.com/teamcity/&quot;&gt;TeamCity&lt;/a&gt; and &lt;a href=&quot;https://www.visualstudio.com/team-services/release-management&quot;&gt;Release Management&lt;/a&gt;) is a core tool for dev-ops. Tests are only good when run regularly to prevent them from becoming stale. A CI system will usually run all tests on every push to your repository. The next step is a Continuous Deployment system (CD) (all of the above CI tools also offer CD ) - this will run tests on push like a CI. Then if the tests pass it will deploy the new version to production.&lt;/p&gt;
&lt;p&gt;Deploying early and often means that bugs due to differences in environments or in hosting the solution are found and fixed early in the process ensuring a smooth release - and a good customer experience.&lt;/p&gt;
&lt;h2 id=&quot;acommunityenabledtechnologystrategy&quot;&gt;#### A Community Enabled Technology Strategy&lt;/h2&gt;
&lt;p&gt;By &lt;a href=&quot;https://www.linkedin.com/in/lorna-martyn-9862111&quot;&gt;Lorna Martyn&lt;/a&gt; of &lt;a href=&quot;https://www.fidelityinvestments.ie/&quot;&gt;Fidelity Investments&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lorna Martyn gave a great insight into the woes of managing the technology strategy of large organizations. High level choices on which technology, standards and best practices to follow may seem like the domain of management, but they are often too removed from the ground forces to be in touch with the wider technology community.&lt;/p&gt;
&lt;p&gt;Her solution is to create &lt;a href=&quot;https://en.wikipedia.org/wiki/Employee_resource_groups&quot;&gt;Employee Resource Groups&lt;/a&gt; (ERGs) for various technology sections. Then take input from the top practitioners in each ERG to form the technology strategy. Regardless of the organization's size (~45,000 employees in FI), such ERGs need to keep an eye on the wider community surrounding their speciality. Otherwise new developments and solutions could be missed. &lt;/p&gt;
&lt;h2 id=&quot;dprogrammingdesignbyintrospection&quot;&gt;#### D Programming - Design by introspection&lt;/h2&gt;
&lt;p&gt;By &lt;a href=&quot;http://erdani.com/&quot;&gt;Andrei Alexandrescu&lt;/a&gt; of &lt;a href=&quot;https://dlang.org/&quot;&gt;D Language Foundation&lt;/a&gt; (&lt;a href=&quot;http://dconf.org/2017/talks/alexandrescu.pdf&quot;&gt;View Slides&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Andrei wrote the book &lt;a href=&quot;https://en.wikipedia.org/wiki/Modern_C%2B%2B_Design&quot;&gt;Modern C++ Design&lt;/a&gt; where he coined the term &lt;a href=&quot;https://en.wikipedia.org/wiki/Policy-based_design&quot;&gt;Policy Based Design&lt;/a&gt; (PBD), back when Design Patterns were everywhere. With design patterns, the programmer was the code generator. With PBD, the programmer created the generator by using template meta-programming to define components / policies at compile time.&lt;/p&gt;
&lt;p&gt;The iteration of this pattern is Design By Introspection (DbI). Andrei defines DbI as a similar meta-programming approach but with more control and plasticity in the code. Classes are composed not just by interfaces but by dynamic components which use introspection to find out what functions the classes they interact with support, and then dynamically configure themselves to suit these purposes. This can even go as far as only importing libraries when certain compile time conditions are met (eg. no need for a logger / performance tool if we are in the production environment).&lt;/p&gt;
&lt;p&gt;This is where working on a language is useful - as D didn't initially support importing libraries from within functions. Thanks to Andrei this limitation was removed. While this is a dangerous feature, it has opened up the path for powerful composition via DbI.&lt;/p&gt;
&lt;p&gt;Read more about DBI in this blog post by Andrei: &lt;a href=&quot;https://dlang.org/blog/2017/05/22/introspection-introspection-everywhere/&quot;&gt;Introspection, Introspection Everywhere&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;machinelearningcognitiveservices&quot;&gt;#### Machine Learning Cognitive Services&lt;/h2&gt;
&lt;p&gt;By &lt;a href=&quot;https://garyshortblog.wordpress.com/&quot;&gt;Gary Short&lt;/a&gt; of &lt;a href=&quot;https://www.microsoft.com&quot;&gt;Microsoft&lt;/a&gt;    &lt;/p&gt;
&lt;p&gt;Machine Learning has advanced by great strides in the past decade. A great example for anyone to try is &lt;a href=&quot;https://how-old.net/&quot;&gt;How old do I look?&lt;/a&gt;, where you can upload a photo of yourself and it will guess your age. Apps like these are improving quickly because there is a huge online community to draw training data from, and thanks to the machine learning services offered by Paas &amp;amp; IaaS systems.&lt;/p&gt;
&lt;p&gt;Gary showed off the wide range of offerings from &lt;a href=&quot;https://azure.microsoft.com/en-us/services/cognitive-services/&quot;&gt;Microsofts Cognitive API Services&lt;/a&gt;. Not only do the supply the processing power and algorithms, but you can use their models created from extensive data sets. The face &amp;amp; age detection shown in &quot;How old do I look?&quot; is available via the &lt;a href=&quot;https://azure.microsoft.com/en-us/services/cognitive-services/face/&quot;&gt;Face API&lt;/a&gt; which isn't limited to age, but also detects hair color, gender and emotions.&lt;/p&gt;
&lt;p&gt;Once again the mantra that with great power comes great responsibility is repeated. By making complex machine learning applications more accessible and easy to build, we need to be aware of it's shortcomings. It is easy to create self confirming models by focusing on the wrong attributes or testing data. This would make it easy to prove any theorem and further personal agendas. &lt;/p&gt;
&lt;h2 id=&quot;primamarsexpedition173&quot;&gt;#### PRIMA Mars Expedition 173&lt;/h2&gt;
&lt;p&gt;By &lt;a href=&quot;http://niamhshaw.ie/&quot;&gt;Dr Niamh Shaw&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Dr Niamh Shaw was this years motivational speaker. She spoke of her long time dream of being an astronaut - and how sadly it is unlikely to be fullfilled due to her qualifications and age. But this hasn't quenched her optimism and enthusiasm for space. She instead has focused on combining her passion for space with her experience as an artist, aka STEAM - putting the Arts in STEM.&lt;/p&gt;
&lt;p&gt;She has created various theatrical performances (like &lt;a href=&quot;https://www.youtube.com/watch?v=pM_XO00ihBY&quot;&gt;My Place in Space&lt;/a&gt;) to inspire the next generation of astronauts.  Dr. Niamh Shaw has gone as far as attending the simulated mission to mars at the at &lt;a href=&quot;http://mdrs.marssociety.org/crew-173/&quot;&gt;Mars Desert Research Station&lt;/a&gt; the Utah desert in January. Now her sights are set on the underwater research station &lt;a href=&quot;http://aquarius.fiu.edu/&quot;&gt;Aquarious&lt;/a&gt; via the &lt;a href=&quot;https://www.nasa.gov/mission_pages/NEEMO/index.html&quot;&gt;NEEMO mission&lt;/a&gt; and Analog missions to the &lt;a href=&quot;https://www.nasa.gov/analogs/nsf&quot;&gt;Antartic&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;She will be at this years &lt;a href=&quot;http://www.isunet.edu/&quot;&gt;Internatial Space University&lt;/a&gt;'s Space Studies Programme in &lt;a href=&quot;http://www.cit.ie/&quot;&gt;Cork Institute of Technologies&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="atlantec" /><category term="2017" /><category term="galway" /><summary type="html">Atlantec is an annual conference on Software Devlopment held in Galway. This year it took place in NUIG on May 25th. There was a host of great presentations covering the hot topics of Docker, Microservices and Machine Learning, while also branching out into the wider world of technology including Mars Exploration and Soft Robots to support Heart Functions.</summary></entry></feed>